 /* Centre for Electronic Design and Technology, NSIT, New Delhi
 * 
 * Dhananjay V Gadre, dhananjay.gadre@gmail.com
 * Rohit Dureja, rohit.dureja@gmail.com
 * Shanjit Singh Jajmann, shanjitsingh@gmail.com
 */

/* Macros defining the memory map of Stellaris. */
#include "inc/hw_memmap.h"

/* Defines the common types and macros */
#include "inc/hw_types.h"

/* Defines and Macros for GPIO API */
#include "driverlib/gpio.h"

/* Prototypes for the system control driver */
#include "driverlib/sysctl.h"

/* Prototypes for the SysTick driver. */
#include "driverlib/systick.h"

/* Prototypes for the NVIC Interrupt Controller Driver. */
#include "driverlib/interrupt.h"

/* Counter to count the number of interrupts that have been called. */
volatile unsigned long time;

/* The interrupt handler for the for Systick interrupt. */
void SysTickIntHandler(void)
{
	/* Interrupt Counter */
    time++;
}

/* Delay function */
void Delay_sys(unsigned long nCount)
{
static unsigned long timecheck;
timecheck = time + nCount;

while((time)!=timecheck);
}

/* Call this function to return the current time. */
unsigned long Timereturn(void)
{
 return time;
}

int main(void)
{
	/* Initialize Counter */
    time = 0;

	/* Set the clocking to directly run from the crystal at 8MHz */
	SysCtlClockSet(SYSCTL_SYSDIV_1 | SYSCTL_USE_OSC | SYSCTL_OSC_MAIN | SYSCTL_XTAL_8MHZ);

	/* Set the clock for the GPIO Port C */
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);

	/* Set the type of the GPIO Pin */
	GPIOPinTypeGPIOOutput(GPIO_PORTC_BASE, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
	
	/* GPIO Pins 5, 6, 7 on PORT C initialized to 1
	 * All LEDs Off.
	 * */
	GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
	
    /* Set up the period for the SysTick timer. */
    SysTickPeriodSet(SysCtlClockGet()/1000);

    /* Enable the SysTick Interrupt. */
    SysTickIntEnable();

    /* Enable SysTick. */
    SysTickEnable();
	
    /* Enable interrupts to the processor. */
    IntMasterEnable();

	while(1)
    {
		/* Make High */
		GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_5, GPIO_PIN_5);

		/* Delay 1 Second, 1000 = 0x3e8 */
		Delay_sys(0x3e8);

		/* Make Low */
		GPIOPinWrite(GPIO_PORTC_BASE, GPIO_PIN_5, 0);

		/* Delay 1 Second, 1000 = 0x3e8 */
		Delay_sys(0x3e8);
    }

}
